#define TAK

#include "general/standard_commands.h"

piece  base, turret, b1, f1, b2, f2, b3, f3, b4, f4, wake1, wake2, wake3, wake4;

static-var  wake, gun_1;

#define SIG_MOVE			16

#define SMOKEPIECE1 turret
#define SMOKEPIECE2 wake1
#define SMOKEPIECE3 wake2
#define SMOKEPIECE4 wake3
#include "general/smokeunit_sws.h"

#define LARGE_MUZZLE_FLASH_FX_RED 1024+1

#define UNIT_ROOT base
#define UNIT_BELOW_GROUND_DIST [-40]
#define UNIT_RISE_SPEED [4]
#define DUSTFX 1024+2
#define DUSTFXPT1 base
#include "general/rebel_unit_build.h"

StartMoving() {
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while(1) {
		if(wake <= 3) {
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
		}
		sleep 300;
	}
}

StopMoving() {
	sleep 100;
}

setSFXoccupy(crap) {
	wake = crap;
	if(wake > 2) {
		set UPRIGHT to 0;
	}
	if(wake < 3) {
		set UPRIGHT to 1;
	}
}

Create() {
	hide f1;
	hide f2;
	hide f3;
	hide f4;
	gun_1 = -1;
	start-script SmokeUnit_SWS();
	call-script ConstructionAnim();
	move base to y-axis 0 now;
}

RestoreAfterDelay() {
	sleep 2000;
	turn turret to y-axis <0> speed <150>;
	turn turret to x-axis <0> speed <150>;
}

QueryWeapon1(piecenum) {
	if(gun_1 == 0) {
		piecenum = f1;
	}
	if(gun_1 == 1) {
		piecenum = f2;
	}
	if(gun_1 == 2) {
		piecenum = f3;
	}
	if(gun_1 == 3) {
		piecenum = f4;
	}
}

Shot1(springsucks) {
	++gun_1;
	if(gun_1 > 3) {
		gun_1 = 0;
	}
	if(gun_1 == 0) {
		emit-sfx LARGE_MUZZLE_FLASH_FX_RED from f1;
		emit-sfx LARGE_MUZZLE_FLASH_FX_RED from f2;
		move b1 to z-axis [-5] now;
		move b2 to z-axis [-5] now;
		sleep 150;
		move b1 to z-axis [0] speed [37.5];
		move b2 to z-axis [0] speed [37.5];
	}
	if(gun_1 == 2) {
		emit-sfx LARGE_MUZZLE_FLASH_FX_RED from f3;
		emit-sfx LARGE_MUZZLE_FLASH_FX_RED from f4;
		move b3 to z-axis [-5] now;
		move b4 to z-axis [-5] now;
		sleep 150;
		move b3 to z-axis [0] speed [37.5];
		move b4 to z-axis [0] speed [37.5];
	}
}

AimFromWeapon1(piecenum) {
	piecenum = turret;
}

AimWeapon1(heading, pitch) {
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;
	if(pitch > <20>) {
		pitch = <20>; }
	turn turret to y-axis heading speed <150>;
	turn turret to x-axis 0 - pitch speed <150>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return 1;
}

FireWeapon1() {
	return 0;
}

Killed(severity, corpsetype) {
	if(severity <= 25) {
		corpsetype = 1;
		explode base type BITMAP;
		return 0;
	}
	if(severity <= 50) {
		corpsetype = 2;
		explode base type BITMAP;
		return 0;
	}
	if(severity <= 99) {
		corpsetype = 3;
		explode base type BITMAP;
		return 0;
	}
	corpsetype = 3;
	explode base type BITMAP;
}
