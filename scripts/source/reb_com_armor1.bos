#define TAK

#include "general/standard_commands.h"

piece  base, wings, antenna, fguns, ffpt1, ffpt2, lgun, lfpt, rgun, rfpt, cockpit;
piece  buildrot, larm1, larm2, larm3, lwrist, lclaw1, lclaw2, rarm1, rarm2, rarm3, rwrist, rclaw1, rclaw2;
piece  wake1, wake2, wake3, wake4;

static-var gun_1, isBuilding, wake;

#define SIG_BUILD 16

#define SMOKEPIECE1 wings
#define SMOKEPIECE2 antenna
#define SMOKEPIECE3 buildrot
#define SMOKEPIECE4 cockpit
#include "general/smokeunit_sws.h"

#define BUILDER_SPARKS_FX 1024+1
#define SMALL_MUZZLE_FLASH_FX_RED 1024+2
#define SMALL_MUZZLE_FLASH_FX_BLUE 1024+3

Sounds() {
	play-sound("Argh_Electrical_Crackle_Short",25);
    #define crackle_short 0
	play-sound ("Argh_Hydraulic_Low", 25);
    #define hydraulic_low 1
	play-sound ("Argh_Hydraulic_High", 25);
    #define hydraulic_high 2
}

BuilderScript() {
	var antennaAngle, randSleep, animation;
	while(1) {
		randSleep = rand(1000,1500);
		antennaAngle = rand(1,20) * <1>;
		if(antennaAngle < 11) {
			turn antenna to y-axis (randSleep * antennaAngle * -1) speed <30>; }
		if(antennaAngle > 10) {
			turn antenna to y-axis (randSleep * antennaAngle) speed <30>; }
		while(isBuilding) {
			animation = rand(1,5);
			if(animation == 1) {
				turn lwrist to z-axis <0> speed <80>;
				turn rwrist to z-axis <0> speed <80>;
				turn rarm1 to x-axis <-10> speed <80>;
				turn rarm2 to x-axis <10> speed <80>;
				turn rarm3 to x-axis <20> speed <80>;
				turn rclaw1 to x-axis <0> speed <80>;
				turn rclaw2 to x-axis <0> speed <80>;
				turn larm1 to x-axis <-10> speed <80>;
				turn larm2 to x-axis <10> speed <80>;
				turn larm3 to x-axis <20> speed <80>;
				turn lclaw1 to x-axis <0> speed <80>;
				turn lclaw2 to x-axis <0> speed <80>;
				wait-for-turn lwrist around z-axis;
				wait-for-turn rarm3 around x-axis;
				wait-for-turn larm3 around x-axis;
				emit-sfx BUILDER_SPARKS_FX from lwrist;
				emit-sfx BUILDER_SPARKS_FX from rwrist;
				get PLAY_SOUND(crackle_short, 196608, 0, 0);
			}	
			if(animation == 2) {
				turn lwrist to z-axis <0> speed <80>;
				turn rwrist to z-axis <0> speed <80>;
				turn rarm1 to x-axis <-20> speed <80>;
				turn rarm2 to x-axis <30> speed <80>;
				turn rarm3 to x-axis <0> speed <80>;
				turn rclaw1 to x-axis <20> speed <80>;
				turn rclaw2 to x-axis <-20> speed <80>;
				turn larm1 to x-axis <-10> speed <80>;
				turn larm2 to x-axis <10> speed <80>;
				turn larm3 to x-axis <20> speed <80>;
				turn lclaw1 to x-axis <0> speed <80>;
				turn lclaw2 to x-axis <0> speed <80>;
				wait-for-turn lwrist around z-axis;
				wait-for-turn rarm3 around x-axis;
				wait-for-turn larm3 around x-axis;
				emit-sfx BUILDER_SPARKS_FX from lwrist;
				emit-sfx BUILDER_SPARKS_FX from rwrist;
				get PLAY_SOUND(hydraulic_low, 196608, 0, 0);
			}		
			if(animation == 3) {
				turn lwrist to z-axis <0> speed <80>;
				turn rwrist to z-axis <0> speed <80>;
				turn rarm1 to x-axis <-10> speed <80>;
				turn rarm2 to x-axis <10> speed <80>;
				turn rarm3 to x-axis <20> speed <80>;
				turn rclaw1 to x-axis <0> speed <80>;
				turn rclaw2 to x-axis <0> speed <80>;
				turn larm1 to x-axis <-20> speed <80>;
				turn larm2 to x-axis <30> speed <80>;
				turn larm3 to x-axis <0> speed <80>;
				turn lclaw1 to x-axis <20> speed <80>;
				turn lclaw2 to x-axis <-20> speed <80>;
				wait-for-turn lwrist around z-axis;
				wait-for-turn rarm3 around x-axis;
				wait-for-turn larm3 around x-axis;
				emit-sfx BUILDER_SPARKS_FX from lwrist;
				emit-sfx BUILDER_SPARKS_FX from rwrist;
				get PLAY_SOUND(crackle_short, 196608, 0, 0);
			}
			if(animation == 4) {
				turn lwrist to z-axis <90> speed <80>;
				turn rwrist to z-axis <0> speed <80>;
				wait-for-turn lwrist around z-axis;
				wait-for-turn rwrist around x-axis;
				emit-sfx BUILDER_SPARKS_FX from lwrist;
				emit-sfx BUILDER_SPARKS_FX from rwrist;
				get PLAY_SOUND(hydraulic_high, 196608, 0, 0);
			}		
			if(animation == 5) {
				turn lwrist to z-axis <0> speed <80>;
				turn rwrist to z-axis <-90> speed <80>;
				wait-for-turn lwrist around z-axis;
				wait-for-turn rwrist around x-axis;
				emit-sfx BUILDER_SPARKS_FX from lwrist;
				emit-sfx BUILDER_SPARKS_FX from rwrist;
				get PLAY_SOUND(crackle_short, 196608, 0, 0);
			}
			sleep randSleep;
		}
		sleep randSleep;
	}		
}

WakeFX(RandomSeed) {
	while(1) {
		RandomSeed = rand(150,400);//varied here to give the wakes some variety, it looks lame when they "pump" at the same time every time, need to fix that elsewhere, frankly
		sleep RandomSeed;
		if( wake <= 3 ) {
			emit-sfx 5 from wake1;
			emit-sfx 3 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 3 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 3 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 3 from wake4;
		}
	}
}

setSFXoccupy(crap) {
	wake = crap;
	if(wake > 2) {
		set UPRIGHT to 0;
	}
	if(wake < 3) {
		set UPRIGHT to 1;
	}
}

Create() {
	hide ffpt1; hide ffpt2; hide lfpt; hide rfpt;
	turn lgun to y-axis <90> now;
	turn rgun to y-axis <-90> now;
	turn larm1 to x-axis <-30> now;
	turn larm2 to x-axis <80> now;
	turn larm3 to x-axis <110> now;
	turn lclaw1 to x-axis <30> now;
	turn lclaw2 to x-axis <-30> now;
	turn rarm1 to x-axis <-30> now;
	turn rarm2 to x-axis <80> now;
	turn rarm3 to x-axis <110> now;
	turn rclaw1 to x-axis <30> now;
	turn rclaw2 to x-axis <-30> now;
	start-script SmokeUnit_SWS();
	start-script WakeFX();
	start-script BuilderScript();
}

RestoreAfterDelay() {
	sleep 3000;
	turn fguns to y-axis <0> speed <90>;
	turn fguns to x-axis <0> speed <90>;
	turn lgun to y-axis <90> speed <90>;
	turn lgun to x-axis <0> speed <90>;
	turn rgun to y-axis <-90> speed <90>;
	turn rgun to x-axis <0> speed <90>;
}

AimFromWeapon1(piecenum) {
	piecenum = cockpit;
}

QueryWeapon1(piecenum) {
	if(gun_1) {
		piecenum = ffpt1; }
	if(!gun_1) {
		piecenum = ffpt2; }
}

AimWeapon1(heading, pitch) {
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;
	turn fguns to y-axis heading speed <120>;
	turn fguns to x-axis <0> - pitch speed <120>;
	wait-for-turn fguns around y-axis;
	wait-for-turn fguns around x-axis;
	start-script RestoreAfterDelay();
	return 1;
}

FireWeapon1() {
	var burst, counter;
	burst = 10;
	counter = 0;
	while(counter < burst) {
		emit-sfx SMALL_MUZZLE_FLASH_FX_BLUE from ffpt1;
		emit-sfx SMALL_MUZZLE_FLASH_FX_BLUE from ffpt2;
		++counter;
		sleep 80;
	}
	gun_1 = !gun_1;
	return 0;
}

AimFromWeapon2(piecenum) {
	piecenum = cockpit;
}

QueryWeapon2(piecenum) {
	piecenum = lfpt;
}

AimWeapon2(heading, pitch) {
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn lgun to y-axis heading speed <120>;
	turn lgun to x-axis <0> - pitch speed <120>;
	wait-for-turn lgun around y-axis;
	wait-for-turn lgun around x-axis;
	start-script RestoreAfterDelay();
	return 1;
}

FireWeapon2() {
	emit-sfx SMALL_MUZZLE_FLASH_FX_RED from lfpt;
	return 0;
}

AimFromWeapon3(piecenum) {
	piecenum = cockpit;
}

QueryWeapon3(piecenum) {
	piecenum = rfpt;
}

AimWeapon3(heading, pitch) {
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3;
	turn rgun to y-axis heading speed <120>;
	turn rgun to x-axis <0> - pitch speed <120>;
	wait-for-turn rgun around y-axis;
	wait-for-turn rgun around x-axis;
	start-script RestoreAfterDelay();
	return 1;
}

FireWeapon3() {
	emit-sfx SMALL_MUZZLE_FLASH_FX_RED from rfpt;
	return 0;
}

QueryNanoPiece(piecenum) {
	piecenum = lwrist;
}

StartBuilding(heading,pitch) {
	signal SIG_BUILD;
	set INBUILDSTANCE to 1;
	isBuilding = TRUE;
	turn buildrot to y-axis heading speed <50>;
	turn larm1 to x-axis <-45> speed <80>;
	turn rarm1 to x-axis <-45> speed <80>;
	wait-for-turn larm1 around x-axis;
	turn larm2 to x-axis <10> speed <80>;
	turn larm3 to x-axis <20> speed <80>;
	turn rarm2 to x-axis <10> speed <80>;
	turn rarm3 to x-axis <20> speed <80>;
	wait-for-turn rarm3 around x-axis;
	turn larm1 to x-axis <-15> speed <80>;
	turn rarm1 to x-axis <-15> speed <80>;
	wait-for-turn larm1 around x-axis;
	wait-for-turn buildrot around y-axis;
}

StopBuilding() {
	set-signal-mask SIG_BUILD;
	set INBUILDSTANCE to 0;
	isBuilding = FALSE;
	turn larm1 to x-axis <-45> speed <80>;
	turn rarm1 to x-axis <-45> speed <80>;
	wait-for-turn larm1 around x-axis;
	turn larm2 to x-axis <80> speed <80>;
	turn larm3 to x-axis <110> speed <80>;
	turn lclaw1 to x-axis <30> speed <80>;
	turn lclaw2 to x-axis <-30> speed <80>;
	turn rarm2 to x-axis <80> speed <80>;
	turn rarm3 to x-axis <110> speed <80>;
	turn rclaw1 to x-axis <30> speed <80>;
	turn rclaw2 to x-axis <-30> speed <80>;
	turn lwrist to z-axis <0> speed <80>;
	turn rwrist to z-axis <0> speed <80>;
	wait-for-turn rarm3 around x-axis;
	turn larm1 to x-axis <-30> speed <80>;
	turn rarm1 to x-axis <-30> speed <80>;
	turn buildrot to y-axis <0> speed <50>;
}

Killed(severity, corpsetype) {
	corpsetype = 1;
	explode base type BITMAP;
	return 0;
}
