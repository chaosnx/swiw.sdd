#define TAK

#include "general/standard_commands.h"

piece  base, body, front, side1, bit1, pipe1, side2, bit2, clone, back, nano;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

#define SIG_ACTIVATE			2

#define SMOKEPIECE1 base
#define SMOKEPIECE2 base
#define SMOKEPIECE3 base
#define SMOKEPIECE4 base
#include "general/smokeunit_sws.h"

activatescr() {
}

deactivatescr() {
}

OpenYard() {
	set YARD_OPEN to 1;
	while(!get YARD_OPEN) {
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard() {
	set YARD_OPEN to 0;
	while(get YARD_OPEN) {
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go() {
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop() {
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState() {
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate) {
	if(statechg_StateChanging) {
		statechg_DesiredState = requestedstate;
		return 0;
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while(statechg_DesiredState != currentstate) {
		if(statechg_DesiredState == 0) {
			call-script Go();
			currentstate = 0;
		}
		if(statechg_DesiredState == 1) {
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create() {
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit_SWS();
	hide nano;
}

QueryNanoPiece(piecenum) {
	piecenum = nano;
}

Activate() {
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate() {
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding(heading,pitch) {
}

StopBuilding() {
}

QueryBuildInfo(piecenum) {
	piecenum = nano;
}

Killed(severity, corpsetype) {
	if(severity <= 25) {
		corpsetype = 1;
		explode base type BITMAP;
		return 0;
	}
	if(severity <= 50) {
		corpsetype = 2;
		explode base type BITMAP;
		return 0;
	}
	if(severity <= 99) {
		corpsetype = 3;
		explode base type BITMAP;
		return 0;
	}
	corpsetype = 3;
	explode base type BITMAP;
}
