#define TAK

#include "general/standard_commands.h"

piece  base, front, rear, turret, sleeves, barrels, f1, f2, ldoor1, ldoor2, rdoor1, rdoor2, wake1, wake2, wake3, wake4, shoulder, arm;

static-var  gun_1, wake;

#define SMOKEPIECE1 base
#define SMOKEPIECE2 front
#define SMOKEPIECE3 rear
#define SMOKEPIECE4 base
#include "general/smokeunit_sws.h"

#define LARGE_MUZZLE_FLASH_FX_RED 1024+1

#define SIG_DOORS 4

#define UNIT_ROOT base
#define UNIT_BELOW_GROUND_DIST [-45]
#define UNIT_RISE_SPEED [4]
#define DUSTFX 1024+2
#define DUSTFXPT1 base
#define DUSTFXPT2 front
#define DUSTFXPT3 rear
#include "general/rebel_unit_build.h"

DoorsOpen() {
	turn ldoor1 to z-axis <45> speed <150>;
	turn rdoor1 to z-axis <-45> speed <150>;
	turn ldoor2 to z-axis <-60> speed <120>;
	turn rdoor2 to z-axis <60> speed <120>;
}

DoorsClose() {
	set-signal-mask SIG_DOORS;
	sleep 5000;
	turn ldoor1 to z-axis <0> speed <150>;
	turn rdoor1 to z-axis <0> speed <150>;
	turn ldoor2 to z-axis <00> speed <120>;
	turn rdoor2 to z-axis <0> speed <120>;
}

TransportPickup(unitid) {
	if(get XZ_HYPOT(get UNIT_XZ(unitid) - get PIECE_XZ(base)) <= [200]) {
		signal SIG_DOORS;
		start-script DoorsOpen();
		attach-unit unitid to base;
		start-script DoorsClose();
	}
}

TransportDrop(unitid, position) {
	var depth, pos;
	depth = get GROUND_HEIGHT(get PIECE_XZ(base));
	if(depth < 3) {
		return 0;
	}
	signal SIG_DOORS;
	start-script DoorsOpen();
	pos = get XZ_HYPOT(get PIECE_XZ(base) - position) + [5];
	set BUSY to 1;
	turn shoulder to y-axis get XZ_ATAN(get PIECE_XZ(base) - position) now;
	attach-unit unitid to arm;
	move arm to z-axis pos speed [10000];
	wait-for-move arm along z-axis;
	drop-unit unitid;
	move arm to z-axis [0] now;
	wait-for-move arm along z-axis;
	sleep 1;
	set BUSY to 0;
	start-script DoorsClose();
}

StartMoving() {
	while(1) {
		if(wake <= 3) {
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
		}
		sleep 300;
	}
	return 0;
}

setSFXoccupy(crap) {
	wake = crap;
	if(wake > 2) {
		set UPRIGHT to 0;
	}
	if(wake < 3) {
		set UPRIGHT to 1;
	}
}

Create() {
	hide f1;
	hide f2;
	gun_1 = -1;
	start-script SmokeUnit_SWS();
	call-script ConstructionAnim();
	move base to y-axis 0 now;
}

RestoreAfterDelay() {
	sleep 5000;
	turn turret to y-axis <0> speed <60>;
	turn sleeves to x-axis <0> speed <60>;
	return 0;
}

AimWeapon1(heading, pitch) {
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;
	turn turret to y-axis heading speed <120>;
	turn sleeves to x-axis 0 - pitch speed <120>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	return 1;
}

FireWeapon1() {
	return 0;
}

AimFromWeapon1(piecenum) {
	piecenum = turret;
}

QueryWeapon1(piecenum) {
	if(gun_1 == 0) {
		piecenum = f1;
	}
	if(gun_1 == 1) {
		piecenum = f2;
	}
}

Shot1(springsucks) {
	++gun_1;
	if(gun_1 > 1) {
		gun_1 = 0;
	}
	if(gun_1 == 0) {
		emit-sfx LARGE_MUZZLE_FLASH_FX_RED from f1;
		emit-sfx LARGE_MUZZLE_FLASH_FX_RED from f2;
		move barrels to z-axis [-3] now;
		sleep 150;
		move barrels to z-axis [0] speed [37.5];
	}
}

Killed(severity, corpsetype) {
	if(severity <= 25) {
		corpsetype = 1;
		explode base type BITMAP;
		return 0;
	}
	if(severity <= 50) {
		corpsetype = 2;
		explode base type BITMAP;
		return 0;
	}
	if(severity <= 99) {
		corpsetype = 3;
		explode base type BITMAP;
		return 0;
	}
	corpsetype = 3;
	explode base type BITMAP;
	return 0;
}
